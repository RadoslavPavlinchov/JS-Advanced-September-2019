function rgbToHexColor(red, green, blue) {
    if (!Number.isInteger(red) || (red < 0) || (red > 255)) {
        return undefined; // Red value is invalid
    }
    if (!Number.isInteger(green) || (green < 0) || (green > 255)) {
        return undefined; // Green value is invalid}
    }
    if (!Number.isInteger(blue) || (blue < 0) || (blue > 255)) {
        return undefined; // Blue value is invalid
    }
    return '#' +
        ('0' + red.toString(16).toUpperCase()).slice(-2) +
        ('0' + green.toString(16).toUpperCase()).slice(-2) +
        ('0' + blue.toString(16).toUpperCase()).slice(-2);
}

// module.exports = rgbToHexColor;

// const rgbToHexColor = require('./script');
// const expect = require('chai').expect;

describe('rgbToHexColor test', () => {

    describe('integer numbers', () => {
        it('255 < red, 255 < blue, 255 < green', () => { 
            expect(rgbToHexColor(256, 255, 255)).to.equal(undefined);
            expect(rgbToHexColor(255, 256, 255)).to.equal(undefined);
            expect(rgbToHexColor(255, 255, 256)).to.equal(undefined);
        });
        it('0 > red, 0 > blue, 0 > green', () => { 
            expect(rgbToHexColor(-1, 0, 0)).to.equal(undefined);
            expect(rgbToHexColor(0, -1, 0)).to.equal(undefined);
            expect(rgbToHexColor(0, 0, -1)).to.equal(undefined);
        });
        it('255, 255, string', () => { 
            expect(rgbToHexColor(255, 255, 'string')).to.equal(undefined);
            expect(rgbToHexColor(255, 'string', 255)).to.equal(undefined);
            expect(rgbToHexColor('string', 255, 255)).to.equal(undefined);
        });
        it('255, 255, 255', () => { 
            expect(rgbToHexColor(255, 255, 255)).to.equal('#FFFFFF');
        });
        it('0, 0, 0', () => { 
            expect(rgbToHexColor(0, 0, 0)).to.equal('#000000');
        });
    });

});
