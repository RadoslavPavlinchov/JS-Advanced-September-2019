class Library {
    constructor(libraryName) {
        this.libraryName = libraryName;
        this.subscribers = [];
        this.subscriptionTypes = {
            normal: Number(this.libraryName.length),
            special: (this.libraryName.length * 2),
            vip: Number.MAX_SAFE_INTEGER
        };
    }

    subscribe(name, type) {
        if (!Object.keys(this.subscriptionTypes).includes(type)) {
            throw new Error(`The type ${type} is invalid`);
        }
        let sub = this.subscribers.find(x => x.name === name);
        if (!sub) {
            this.subscribers.push({
                name,
                type,
                books: []
            });
        } else {
            sub.type = type;
        }
        return sub ? sub : this.subscribers[this.subscribers.length - 1];
    }

    unsubscribe(name) {
        let subIndex = this.subscribers.findIndex(x => x.name === name);
        if (subIndex === -1) {
            throw new Error(`There is no such subscriber as ${name}`);
        }
        this.subscribers.splice(subIndex, 1);
        return this.subscribers;
    }

    receiveBook(subscriberName, bookTitle, bookAuthor) {
        let sub = this.subscribers.find(x => x.name === subscriberName);
        if (!sub) {
            throw new Error(`There is no such subscriber as ${subscriberName}`);
        }

        if (sub.books.length >= this.subscriptionTypes[sub.type]) {
            throw new Error(`You have reached your subscription limit ${this.subscriptionTypes[sub.type]}!`);
        } 
            sub.books.push({
                title: bookTitle,
                author: bookAuthor
            });

        return sub;
    }

    showInfo() {
        let output = '';
        if (this.subscribers.length === 0) {
            return `${this.libraryName} has no information about any subscribers`;
        }
        for (const sub of this.subscribers) {
            output += `Subscriber: ${sub.name}, Type: ${sub.type}\n`;
            output += `Received books: `;
            let map = sub.books.map((x) => `${x.title} by ${x.author}`).join(', ');
            output += `${map}\n`;
        }
        return output;
    }
}
let lib = new Library('Lib');

lib.subscribe('Peter', 'normal');
lib.subscribe('John', 'special');

lib.receiveBook('John', 'A Song of Ice and Fire', 'George R. R. Martin');
lib.receiveBook('Peter', 'Lord of the rings', 'J. R. R. Tolkien');
lib.receiveBook('John', 'Harry Potter', 'J. K. Rowling');

console.log(lib.showInfo());
